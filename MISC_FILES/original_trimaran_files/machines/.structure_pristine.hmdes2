/******************************************************************************

                    SOFTWARE LICENSE AGREEMENT NOTICE
                   -----------------------------------

IT IS A BREACH OF THIS LICENSE AGREEMENT TO REMOVE THIS NOTICE FROM THE FILE
OR SOFTWARE, OR ANY MODIFIED VERSIONS OF THIS FILE OR SOFTWARE OR DERIVATIVE
WORKS. 
___________________________________________________

Copyright Notices/Identification of Licensor(s) of Original Software 
in the File 

Copyright (C) 1994 Hewlett-Packard Company

All rights reserved by the foregoing, respectively.
___________________________________________________

Copyright Notices/Identification of Subsequent Licensor(s)/Contributors of 
Derivative Works

Copyright <Year> <Owner>
<Optional: For Commercial license rights, contact:_______________>

All rights reserved by the foregoing, respectively.
___________________________________________________

The code contained in this file, including both binary and source [if released
by the owner(s)] (hereafter, Software) is subject to copyright by the
respective Licensor(s) and ownership remains with such Licensor(s).  The
Licensor(s) of the original Software remain free to license their respective
proprietary Software for other purposes that are independent and separate from
this file, without obligation to any party. 

Licensor(s) grant(s) you (hereafter, Licensee) a license to use the Software
for academic, research and internal business purposes only, without a fee.
"Internal business purposes" means that Licensee may install, use and execute
the Software for the purpose of designing and evaluating products.  Licensee
may submit proposals for research support, and receive funding from private
and Government sponsors for continued development, support and maintenance of
the Software for the purposes permitted herein. 

Licensee may also disclose results obtained by executing the Software, as well
as algorithms embodied therein.  Licensee may redistribute the Software to
third parties provided that the copyright notices and this License Agreement
Notice statement are reproduced on all copies and that no charge is associated
with such copies. No patent or other intellectual property license is granted
or implied by this Agreement, and this Agreement does not license any acts
except those expressly recited. 

Licensee may modify the Software to make derivative works (as defined in
Section 101 of Title 17, U.S. Code) (hereafter, Derivative Works), as
necessary for its own academic, research and internal business purposes.
Title to copyrights and other proprietary rights in Derivative Works created
by Licensee shall be owned by Licensee subject, however, to the underlying
ownership interest(s) of the Licensor(s) in the copyrights and other
proprietary rights in the original Software.  All the same rights and licenses
granted herein and all other terms and conditions contained in this Agreement
pertaining to the Software shall continue to apply to any parts of the
Software included in Derivative Works.  Licensee's Derivative Work should
clearly notify users that it is a modified version and not the original
Software distributed by the Licensor(s). 

If Licensee wants to make its Derivative Works available to other parties,
such distribution will be governed by the terms and conditions of this License
Agreement.  Licensee shall not modify this License Agreement, except that
Licensee shall clearly identify the contribution of its Derivative Work to
this file by adding an additional copyright notice to the other copyright
notices listed above, to be added below the line "Copyright
Notices/Identification of Subsequent Licensor(s)/Contributors of Derivative
Works."  A party who is not an owner of such Derivative Work within the
meaning of U.S. Copyright Law (i.e., the original author, or the employer of
the author if "work of hire") shall not modify this License Agreement or add
such party's name to the copyright notices above. 

Each party who contributes Software or makes a Derivative Work to this file
(hereafter, Contributed Code) represents to each Licensor and to other
Licensees for its own Contributed Code that: 

(a)  Such Contributed Code does not violate (or cause the Software to
violate) the laws of the United States, including the export control laws of
the United States, or the laws of any other jurisdiction. 

(b)  The contributing party has all legal right and authority to make such
Contributed Code available and to grant the rights and licenses contained in
this License Agreement without violation or conflict with any law. 

(c)  To the best of the contributing party's knowledge and belief, the
Contributed Code does not infringe upon any proprietary rights or intellectual
property rights of any third party. 

LICENSOR(S) MAKE(S) NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE
OR DERIVATIVE WORKS FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" 	WITHOUT
EXPRESS OR IMPLIED WARRANTY, INCLUDING BUT NOT LIMITED TO THE MERCHANTABILITY,
USE OR FITNESS FOR ANY PARTICULAR PURPOSE AND ANY WARRANTY AGAINST
INFRINGEMENT OF ANY INTELLECTUAL PROPERTY RIGHTS.  LICENSOR(S) SHALL NOT BE
LIABLE FOR ANY DAMAGES SUFFERED BY THE USERS OF THE SOFTWARE OR DERIVATIVE
WORKS. 

Any Licensee wishing to make commercial use of the Software or Derivative
Works should contact each and every Licensor to negotiate an appropriate
license for such commercial use, and written permission of all Licensors will
be required for such a commercial license.  Commercial use includes (1)
integration of all or part of the source code into a product for sale by or on
behalf of Licensee to third parties, or (2) distribution of the Software or
Derivative Works to third parties that need it to utilize a commercial product
sold or licensed by or on behalf of Licensee. 

By using or copying this Contributed Code, Licensee agrees to abide by the
copyright law and all other applicable laws of the U.S., and the terms of this
License Agreement.  Any individual Licensor shall have the right to terminate
this license immediately by written notice upon Licensee's breach of, or
non-compliance with, any of its terms.  Licensee may be held legally
responsible for any copyright infringement that is caused or encouraged by
Licensee's failure to abide by the terms of this License Agreement. 

******************************************************************************/

/*
 * Preliminary pristine Hmdes2 structure.
 * 
 * Created by John C. Gyllenhaal 2/10/95
 * Modified by Shail Aditya 01/29/96
 */

/* 
 * Specifies the registers in the architectures.
 * Also specifies how these registers overlap each other.  The overlapping
 * conditions are assumed to be completely specified (up to the compiler
 * to check for errors in this case).
 */
CREATE SECTION Register
  OPTIONAL overlaps (LINK(Register)*);
{
}

/* **** Shail Aditya 01/29/96 ****
 * Classifies the registers into register files with static and rotating parts.
 * Also specifies their widths and whether they have a speculative tag bit.
 */

CREATE SECTION Register_File
REQUIRED width(INT);
OPTIONAL static(LINK(Register)*);
OPTIONAL rotating(LINK(Register)*);
OPTIONAL speculative(INT);
// Shail Aditya 07/18/97 - added reverse map from physical file to virtual ioset
OPTIONAL virtual(STRING);
// rcj/Shail Aditya 06/06/97 - added support for short literal files
OPTIONAL intlist(INT*);         // actual literals
OPTIONAL intrange(INT*);        // range in pairs (lower, upper)
OPTIONAL doublelist(DOUBLE*);   // actual literals
{
}

/* 
 * Specifies the field types supported by the architecture's 
 * instruction set (assembly language).
 *
 * Currently uses LINKs to specify the hierarchy of field types.
 *
 * When the CHILD datum type gets implemented, the LINK will get changed
 * to CHILD.  For example, lit11 is compatible with lit5.
 *
 * **** Shail Aditya 01/29/96 ****
 * Added a link to a set of register files. 
 * **** Shail Aditya 06/11/97 ****
 * Changed set of register files to a single register file. IO Sets should
 * always be represented using compatible_with field. 
 */
CREATE SECTION Field_Type
  OPTIONAL compatible_with(LINK(Field_Type)*);
  OPTIONAL regfile(LINK(Register_File));
{
}

/*
 * Specifies the architecture's assembly language operation formats
 */
CREATE SECTION Operation_Format
  OPTIONAL pred(LINK(Field_Type)*);
  OPTIONAL src(LINK(Field_Type)*);
  OPTIONAL dest(LINK(Field_Type)*);
{
}

/* 
 * Specifies the architecture's resources (real or for only
 * interlock purposes)
 * Added a mechanism for counted identical resources
 * -- Shail Aditya 08/11/98
 */
CREATE SECTION Resource
OPTIONAL count(INT);
{
}

/*
 * Specifies the characteristic's of the architecture's resource usage.
 * Namely, when a resource is used by an operation relative to
 * issue time.
 *
 * Possible extension:  Specify if resource used if operation predicate
 * 			squashed.

 * Added an optional field for counting the number of resources used
 * on each cycle, defaulting to 1 -- Shail Aditya 08/12/98
 */
CREATE SECTION Resource_Usage
  REQUIRED use(LINK(Resource));
  REQUIRED time(INT INT*);
  OPTIONAL count(INT INT*); 
{
}

/*
 * Specifies resource units (such as function units) that should
 * be treated like a unit by the scheduler/simulator
 */
CREATE SECTION Resource_Unit
  REQUIRED use(LINK(Resource_Usage) LINK(Resource_Usage)*);
{
}

/* 
 * Specifies option for the reservation tables.  For example,
 * that any one of the ialus may be used.
 */
CREATE SECTION Table_Option
  REQUIRED one_of(LINK(Resource_Unit|Resource_Usage) 
		  LINK(Resource_Unit|Resource_Usage)*);
{
}


/* 
 * Specifies the reservation tables used to model the architecture.
 * (How resources are used as an operation executes.) 
 * 
 */
CREATE SECTION Reservation_Table
  REQUIRED use(LINK(Table_Option|Resource_Unit|Resource_Usage)*);
{
}

/*
 * Used to specify how register and sync operands interact so that
 * a dependence distance can be calculated.
 *
 * For now, a list of possible use times are specified for each operand.
 *
 * Other information that it may be desirable to specify is whether
 * the dependence holds for predicated operations on disjoint predicates.
 */
CREATE SECTION Operand_Latency
  REQUIRED time(INT*);
{
}


/*
 * The section is used to specify the dependence distances between
 * operations (if dependence exists).  All dependences (register,
 * memory, control, sync, etc) are modeled as flow,
 * output, and anti dependencies between operands.
 *
 * Uses Operand_Latency above to specify how operands interact.
 *
 * **** Shail Aditya 01/29/96 ****
 * Allow multiple mem, ctrl, sync srcs and dests.
 * Added exception and register reservation latencies.
 */
CREATE SECTION Operation_Latency
  OPTIONAL dest(LINK(Operand_Latency)*);
  OPTIONAL src(LINK(Operand_Latency)*);
  OPTIONAL pred(LINK(Operand_Latency)*);

  OPTIONAL mem_dest(LINK(Operand_Latency)*);
  OPTIONAL ctrl_dest(LINK(Operand_Latency)*);
  OPTIONAL sync_dest(LINK(Operand_Latency)*);

  OPTIONAL mem_src(LINK(Operand_Latency)*);
  OPTIONAL ctrl_src(LINK(Operand_Latency)*);
  OPTIONAL sync_src(LINK(Operand_Latency)*);

  OPTIONAL exc(LINK(Operand_Latency));
  OPTIONAL rsv(LINK(Operand_Latency)*);
{
}

/*
 * Describes a scheduling alternative for an operation.
 *
 * Allow multiple operation formats to be specified 
 * (for operations that have multiple operation formats but behave the same).
 */
CREATE SECTION Scheduling_Alternative
  REQUIRED format (LINK(Operation_Format) LINK(Operation_Format)*);
  REQUIRED resv (LINK(Reservation_Table));
  REQUIRED latency (LINK(Operation_Latency));
{
}

/*
 * Describes the operations in the architecture.
 *
 * The scheduling alternatives for each operations may be specified.
 */
CREATE SECTION Operation
  REQUIRED alt(LINK(Scheduling_Alternative)*);
{
}

///////////////////////////////////////////////////////////// 
// Extensions to MDES

// Elcor ISA Extensions -- Shail Aditya June 1997.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// These table declaration have now been moved here from the ISA for
// consistency. These are Elcor specific MDES classes. 

// Elcor specific operation properties are defined here.
CREATE SECTION Elcor_Operation_Flag
{
}

// Elcor Operations form higher levels of the operation hierarchy.
// Right now we have only one additional level above the architectural 
// Operations. It is the customizer's job to flatten this hierarchy 
// into individual scheduling alternatives and regroup based on
// Operation formats and summary latency specifications. 

CREATE SECTION Elcor_Operation
OPTIONAL op(LINK(Operation)*);
OPTIONAL flags(LINK(Elcor_Operation_Flag)*);
OPTIONAL revbrop(LINK(Elcor_Operation));
OPTIONAL advloadop(LINK(Elcor_Operation));
{
}

