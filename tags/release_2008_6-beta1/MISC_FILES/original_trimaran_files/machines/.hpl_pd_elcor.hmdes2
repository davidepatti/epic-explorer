/******************************************************************************

                    SOFTWARE LICENSE AGREEMENT NOTICE
                   -----------------------------------

IT IS A BREACH OF THIS LICENSE AGREEMENT TO REMOVE THIS NOTICE FROM THE FILE
OR SOFTWARE, OR ANY MODIFIED VERSIONS OF THIS FILE OR SOFTWARE OR DERIVATIVE
WORKS. 
___________________________________________________

Copyright Notices/Identification of Licensor(s) of Original Software 
in the File 

Copyright (C) 1994 Hewlett-Packard Company

All rights reserved by the foregoing, respectively.
___________________________________________________

Copyright Notices/Identification of Subsequent Licensor(s)/Contributors of 
Derivative Works

Copyright <Year> <Owner>
<Optional: For Commercial license rights, contact:_______________>

All rights reserved by the foregoing, respectively.
___________________________________________________

The code contained in this file, including both binary and source [if released
by the owner(s)] (hereafter, Software) is subject to copyright by the
respective Licensor(s) and ownership remains with such Licensor(s).  The
Licensor(s) of the original Software remain free to license their respective
proprietary Software for other purposes that are independent and separate from
this file, without obligation to any party. 

Licensor(s) grant(s) you (hereafter, Licensee) a license to use the Software
for academic, research and internal business purposes only, without a fee.
"Internal business purposes" means that Licensee may install, use and execute
the Software for the purpose of designing and evaluating products.  Licensee
may submit proposals for research support, and receive funding from private
and Government sponsors for continued development, support and maintenance of
the Software for the purposes permitted herein. 

Licensee may also disclose results obtained by executing the Software, as well
as algorithms embodied therein.  Licensee may redistribute the Software to
third parties provided that the copyright notices and this License Agreement
Notice statement are reproduced on all copies and that no charge is associated
with such copies. No patent or other intellectual property license is granted
or implied by this Agreement, and this Agreement does not license any acts
except those expressly recited. 

Licensee may modify the Software to make derivative works (as defined in
Section 101 of Title 17, U.S. Code) (hereafter, Derivative Works), as
necessary for its own academic, research and internal business purposes.
Title to copyrights and other proprietary rights in Derivative Works created
by Licensee shall be owned by Licensee subject, however, to the underlying
ownership interest(s) of the Licensor(s) in the copyrights and other
proprietary rights in the original Software.  All the same rights and licenses
granted herein and all other terms and conditions contained in this Agreement
pertaining to the Software shall continue to apply to any parts of the
Software included in Derivative Works.  Licensee's Derivative Work should
clearly notify users that it is a modified version and not the original
Software distributed by the Licensor(s). 

If Licensee wants to make its Derivative Works available to other parties,
such distribution will be governed by the terms and conditions of this License
Agreement.  Licensee shall not modify this License Agreement, except that
Licensee shall clearly identify the contribution of its Derivative Work to
this file by adding an additional copyright notice to the other copyright
notices listed above, to be added below the line "Copyright
Notices/Identification of Subsequent Licensor(s)/Contributors of Derivative
Works."  A party who is not an owner of such Derivative Work within the
meaning of U.S. Copyright Law (i.e., the original author, or the employer of
the author if "work of hire") shall not modify this License Agreement or add
such party's name to the copyright notices above. 

Each party who contributes Software or makes a Derivative Work to this file
(hereafter, Contributed Code) represents to each Licensor and to other
Licensees for its own Contributed Code that: 

(a)  Such Contributed Code does not violate (or cause the Software to
violate) the laws of the United States, including the export control laws of
the United States, or the laws of any other jurisdiction. 

(b)  The contributing party has all legal right and authority to make such
Contributed Code available and to grant the rights and licenses contained in
this License Agreement without violation or conflict with any law. 

(c)  To the best of the contributing party's knowledge and belief, the
Contributed Code does not infringe upon any proprietary rights or intellectual
property rights of any third party. 

LICENSOR(S) MAKE(S) NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE
OR DERIVATIVE WORKS FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" 	WITHOUT
EXPRESS OR IMPLIED WARRANTY, INCLUDING BUT NOT LIMITED TO THE MERCHANTABILITY,
USE OR FITNESS FOR ANY PARTICULAR PURPOSE AND ANY WARRANTY AGAINST
INFRINGEMENT OF ANY INTELLECTUAL PROPERTY RIGHTS.  LICENSOR(S) SHALL NOT BE
LIABLE FOR ANY DAMAGES SUFFERED BY THE USERS OF THE SOFTWARE OR DERIVATIVE
WORKS. 

Any Licensee wishing to make commercial use of the Software or Derivative
Works should contact each and every Licensor to negotiate an appropriate
license for such commercial use, and written permission of all Licensors will
be required for such a commercial license.  Commercial use includes (1)
integration of all or part of the source code into a product for sale by or on
behalf of Licensee to third parties, or (2) distribution of the Software or
Derivative Works to third parties that need it to utilize a commercial product
sold or licensed by or on behalf of Licensee. 

By using or copying this Contributed Code, Licensee agrees to abide by the
copyright law and all other applicable laws of the U.S., and the terms of this
License Agreement.  Any individual Licensor shall have the right to terminate
this license immediately by written notice upon Licensee's breach of, or
non-compliance with, any of its terms.  Licensee may be held legally
responsible for any copyright infringement that is caused or encouraged by
Licensee's failure to abide by the terms of this License Agreement. 

******************************************************************************/

/////////////////////////////////////////////////////////////////////////////
//
//      File:           hpl_pd_elcor.hmdes2
//      Authors:        Shail Aditya
//      Created:        January, 1996
//      Description:    HPL-PD Architecture Description (Elcor Specific)
//
/////////////////////////////////////////////////////////////////////////////
// HPL-PD Machine Architecture Description (IFMB model)

// Preliminary conversion of PLAYDOH.hmdes1 to ELCOR specific hmdes2 format.
// 
// Written by Shail Aditya 01/16/96
// Based on John C. Gyllenhaal's example of PA_7100_IMPACT.hmdes2
// Based on Rick Hank's PLAYDOH.hmdes1

// *************************************************************
// Elcor Operations and Properties

SECTION Elcor_Operation_Flag
{
  // Operation Class
  NULLOP();
  LOADOP();
  STOREOP();
  BRANCHOP();
  ARITHOP();

  // Resource Class
  NULL();
  INT();
  FLOAT();
  MEMORY();
  BRANCH();
  // HPL-PD 2.0 Extn
  $if ($?{local_memory_units}) {
  LOCALMEMORY();
  }

  // Eager Class
  NONSPECULATIVE();
  SPECULATIVE(); 

  // Other flags
  is_pred();  		// op is predicated
  is_leop();		// op follows less-than-equals semantics
  is_advload();		// op is advanced load
  is_assoc();		// op is associative
  is_comm();		// op is commutative
}

// *************************************************************
// Dummy/Pseudo Scheduling Alternatives and Operations

SECTION Operation_Format
{
  OF_null(pred() src() dest());
  OF_def(pred() src(FT_icfbplu FT_icfbplu) dest(FT_icfbpu));
  OF_use(pred() src(FT_l) dest());
  OF_alloc(pred() src(FT_l) dest(FT_i));
  OF_dummy(pred() src() dest());
  OF_all(pred() src(FT_icfbpu) dest(FT_icfbpu));
  OF_brdir(pred() src(FT_l FT_ifcl FT_ifcl) dest());
  OF_brind(pred() src(FT_i) dest());
}

SECTION Scheduling_Alternative
{
  SA_null_null_null(format(OF_null) latency(OL_null) resv(RT_null));
  SA_def_null_null(format(OF_def) latency(OL_null) resv(RT_null));
  SA_use_null_null(format(OF_use) latency(OL_null) resv(RT_null));
  SA_alloc_null_null(format(OF_alloc) latency(OL_null) resv(RT_null));
  SA_dummy_null_null(format(OF_dummy) latency(OL_null) resv(RT_null));
  SA_all_branch_null(format(OF_all) latency(OL_branch) resv(RT_null));
  SA_all_null_null(format(OF_all) latency(OL_null) resv(RT_null));
  SA_brdir_branch_null(format(OF_brdir) latency(OL_branch) resv(RT_null));
  SA_brind_branch_null(format(OF_brind) latency(OL_branch) resv(RT_null));
}

SECTION Operation
{
  // dummy ops
  "PROLOGUE.0"(alt(SA_null_null_null));
  "EPILOGUE.0"(alt(SA_null_null_null));
  "DEFINE.0"(alt(SA_def_null_null));
  "ALLOC.0"(alt(SA_alloc_null_null));
  "DUMMY_BR.0"(alt(SA_dummy_null_null));
  "C_MERGE.0"(alt(SA_dummy_null_null));
  "D_SWITCH.0"(alt(SA_all_null_null));
  "D_MERGE.0"(alt(SA_all_null_null));
  "REMAP.0"(alt(SA_all_null_null));
  "NO_OP.0"(alt(SA_dummy_null_null));
  "M_NO_OP.0"(alt(SA_use_null_null));
  // branch pseudo ops
  "BRDIR.0"(alt(SA_brdir_branch_null));
  "BRIND.0"(alt(SA_brind_branch_null));
}

// *************************************************************
// Elcor Operations

SECTION Elcor_Operation
{
  // **** Integer operations ****

  // Table 2: Integer computation operations 
  $for (class in intarith1_int intarith2_int intarith2_intshift intarith2_intmpy){
    $for (op in ${OP_${class}}){
      $for(w in ${int_alu_widths}){
	${op}_${w}(op($for (idx in $0..(integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT SPECULATIVE));
      }
    }
  }
  // Table 2: Integer computation operations 
  $for (class in intarith2_intdiv){
    $for (op in ${OP_${class}}){
      $for(w in ${int_alu_widths}){
	${op}_${w}(op($for (idx in $0..(integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT NONSPECULATIVE));
      }
    }
  }

  // Table 4: Conversion operations 
  $for(op in ${OP_sign_extend}){
    $for(w in ${int_extract_widths}){
      ${op}_${w}(op($for (idx in $0..(integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT SPECULATIVE));
    }
  }

  // Table 5: Move operations
  $for(class in moveii movepi movegbp movegcm){
    $for(op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	    flags(ARITHOP INT SPECULATIVE));
    }
  }

  // New Operations - Mass clear operation for PR
  $for(op in ${OP_mass_pred_clear}) {
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP INT SPECULATIVE));
  }

  // New Operations - Move pseudo operations
  $for(class in moveip movepp){
    $for(op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	    flags(ARITHOP INT SPECULATIVE));
    }
  }
  $for(op in ${OP_pred_writes}){
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP NULL SPECULATIVE));
  }

  // HPL-PD 2.0 Extn
  // Split moves instead of MOVE
  $for(op in ${OP_split_moves}) {
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP INT SPECULATIVE));
  }

  // Int literal moves to GPR
  $for(op in ${OP_int_literal_moves}) {
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	    flags(ARITHOP INT SPECULATIVE));
  }

  // Table 8: Compare-to-register operations
  $for(op in ${OP_int_compare_to_reg}){
    $for(w in ${int_alu_widths}){
      $for(ic in ${integer_compare_conds}){
	${op}_${w}_${ic}(op($for (idx in $0..(integer_units-1)) { "${op}_${w}_${ic}.${idx}"})
			 flags(ARITHOP INT SPECULATIVE));
      }
    }
  }

  // Table 9: Two-target compare-to-predicate operations
  $for(op in ${OP_int_cmp_pred_two}){
    $for(w in ${int_alu_widths}){
      $for(ic in ${integer_compare_conds}){
	$for(da1 in ${cmpp_dest_actions}){
	  $for(da2 in ${cmpp_dest_actions}){	
	    ${op}_${w}_${ic}_${da1}_${da2}(op($for (idx in $0..(integer_units-1)) 
					      { "${op}_${w}_${ic}_${da1}_${da2}.${idx}"})
					   flags(ARITHOP INT SPECULATIVE));
	  }
	}
      }
    }
  }

/*  ----------
  // HPL-PD extension: One target compare to predicate operations. 
  $for(op in ${OP_int_cmp_pred_one}){
    $for(w in ${int_alu_widths}){
      $for(ic in ${integer_compare_conds}){
	$for(da1 in ${cmpp_dest_actions}){
	${op}_${w}_${ic}_${da1}(op($for (idx in $0..(integer_units-1)) 
	                           { "${op}_${w}_${ic}_${da1}.${idx}"})
			        flags(ARITHOP INT SPECULATIVE));
	}
      }
    }
  }
--------- */

  // Table 16: Prepare to branch (cast on int unit)
  $for(op in ${OP_pbrs}){
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP INT SPECULATIVE));
  }

  // HPL-PD 2.0 extn
  // literal moves to BTR
  $for(op in ${OP_btr_literal_moves}) {
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP INT SPECULATIVE));
  }
  // prepare to branch with literals
  $for(op in ${OP_pbr_with_literals}) {
    ${op}(op($for (idx in $0..(integer_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP INT SPECULATIVE));
  }

  // **** Float Operations ****

  // Table 3: Floating-point computation operations
  $for (class in floatarith1_float floatarith1_floatdiv floatarith2_float floatarith2_floatdiv floatarith2_floatmpy floatarith3_floatmpy){
    $for(op in ${OP_${class}}){
      $for(w in ${float_widths}){
	${op}_${w}(op($for (idx in $0..(float_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Table 4: Conversion operations 
  $for(op in ${OP_convif} ${OP_convfi} ${OP_convff}){
    ${op}(op($for (idx in $0..(float_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP FLOAT SPECULATIVE));
  }

  // Table 5: Move operations
  $for(op in ${OP_moveff}){
    $for(w in ${float_widths}){
      ${op}_${w}(op($for (idx in $0..(float_units-1)) { "${op}_${w}.${idx}"})
		 flags(ARITHOP FLOAT SPECULATIVE));
    }
  }

  // HPL-PD 2.0 Extn
  // Float literal moves to FPR
  $for(op in ${OP_float_literal_moves}) {
    ${op}(op($for (idx in $0..(float_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP FLOAT SPECULATIVE));
  }

  // Table 8: Compare-to-register operations
  $for(op in ${OP_float_compare_to_reg}){
    $for(w in ${float_widths}){
      $for(fc in ${float_compare_conds}){
	${op}_${w}_${fc}(op($for (idx in $0..(float_units-1)) { "${op}_${w}_${fc}.${idx}"})
			 flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Table 9: Two-target compare-to-predicate operations
  $for(op in ${OP_float_cmp_pred_two}){
    $for(w in ${float_widths}){
      $for(fc in ${float_compare_conds}){
	$for(da1 in ${cmpp_dest_actions}){
	  $for(da2 in ${cmpp_dest_actions}){	
	    ${op}_${w}_${fc}_${da1}_${da2}(op($for (idx in $0..(float_units-1)) 
					      { "${op}_${w}_${fc}_${da1}_${da2}.${idx}"})
					   flags(ARITHOP FLOAT SPECULATIVE));
	  }
	}
      }
    }
  }

/*  ----------
  // HPL-PD extension: One target compare to predicate operations. 
  $for(op in ${OP_float_cmp_pred_one}){
    $for(w in ${float_widths}){
      $for(fc in ${float_compare_conds}){
	$for(da1 in ${cmpp_dest_actions}){
	  ${op}_${w}_${fc}_${da1}(op($for (idx in $0..(float_units-1)) 
				     { "${op}_${w}_${fc}_${da1}.${idx}"})
				  flags(ARITHOP FLOAT SPECULATIVE));
	}
      }
    }
  }
--------- */

  // **** Memory Operations ****

  // Table 5: Move operations
  $for (class in moveif movefi){
    $for(op in ${OP_${class}}){
      $for(rh in ${float_register_halves}){
	${op}_${rh}(op($for (idx in $0..(memory_units-1)) { "${op}_${rh}.${idx}"})
		    flags(ARITHOP MEMORY SPECULATIVE));
      }
    }
  }

  // Table 12, 13, 14: Load/store operations for cache/main memory
  // Integer load ops
  $for(ss in ${latency_src_cache_specifiers}){
    $for(ts in ${target_cache_specifiers}){
      $for(w in ${int_mem_widths}){
	$for (op in ${OP_intload}){
	  ${op}_${w}_${ss}_${ts}(op($for (idx in $0..(memory_units-1))
				    { "${op}_${w}_${ss}_${ts}.${idx}"})
				 flags(LOADOP MEMORY SPECULATIVE));
	}
      }
    }
  }

  // Float load ops
  $for(ss in ${latency_src_cache_specifiers}){
    $for(ts in ${target_cache_specifiers}){
      $for(w in ${float_widths}){
	$for (op in ${OP_floatload}){
	  ${op}_${w}_${ss}_${ts}(op($for (idx in $0..(memory_units-1))
				    { "${op}_${w}_${ss}_${ts}.${idx}"})
				 flags(LOADOP MEMORY SPECULATIVE));
	}
      }
    }
  }

  // Integer store ops
  $for(ts in ${target_cache_specifiers}){
    $for(w in ${int_mem_widths}){
      $for (op in ${OP_intstore}){
	  ${op}_${w}_${ts}(op($for (idx in $0..(memory_units-1))
			      { "${op}_${w}_${ts}.${idx}"})
			   flags(STOREOP MEMORY NONSPECULATIVE));
      }
    }
  }

  // Float store ops
  $for(ts in ${target_cache_specifiers}){
    $for(w in ${float_widths}){
      $for (op in ${OP_floatstore}){
	  ${op}_${w}_${ts}(op($for (idx in $0..(memory_units-1))
			      { "${op}_${w}_${ts}.${idx}"})
			   flags(STOREOP MEMORY NONSPECULATIVE));
      }
    }
  }

  // Int ldv ops
  $for(op in ${OP_intload_dv}){
    $for(w in ${int_mem_widths}){
      ${op}_${w}(op($for (idx in $0..(memory_units-1)) { "${op}_${w}.${idx}"})
		 flags(LOADOP MEMORY SPECULATIVE));
    }
  }

  // Float ldv ops
  $for(op in ${OP_floatload_dv}){
    $for(w in ${float_widths}){
      ${op}_${w}(op($for (idx in $0..(memory_units-1)) { "${op}_${w}.${idx}"})
		 flags(LOADOP MEMORY SPECULATIVE));
    }
  }

  // Explicit save/restore formats - Shail Aditya 05/26/98
  $for(class in intsave floatsave brsave){
    $for(op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(memory_units-1)) { "${op}.${idx}"})
	    flags(STOREOP MEMORY NONSPECULATIVE));
    }
  }
  $for(class in intrestore floatrestore brrestore){
    $for(op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(memory_units-1)) { "${op}.${idx}"})
	    flags(LOADOP MEMORY SPECULATIVE));
    }
  }

  // Operations for predicate spilling. These will go away soon.
  $for(op in ${OP_pfill}){
    ${op}(op($for (idx in $0..(memory_units-1)) { "${op}.${idx}"}) 
	  flags(LOADOP MEMORY SPECULATIVE));
  }
  $for(op in ${OP_pspill}){
    ${op}(op($for (idx in $0..(memory_units-1)) { "${op}.${idx}"}) 
	  flags(STOREOP MEMORY NONSPECULATIVE));
  }


  // HPL-PD 2.0 Extn
  // **** Local Memory Operations ****
  $if ($?{local_memory_units}) {
    $for(lm in ${local_memory_specifiers}){

      $for(op in ${OP_intload_local}){
	$for(w in ${int_mem_widths}){
	  ${op}_${w}_${lm}(op($for (idx in $0..(local_memory_units-1)) 
			      { "${op}_${w}_${lm}.${idx}"})
			   flags(LOADOP LOCALMEMORY SPECULATIVE));
	}
      }
      $for(op in ${OP_floatload_local}){
	$for(w in ${float_widths}){
	  ${op}_${w}_${lm}(op($for (idx in $0..(local_memory_units-1)) 
			      { "${op}_${w}_${lm}.${idx}"})
			   flags(LOADOP LOCALMEMORY SPECULATIVE));
	}
      }
      $for(op in ${OP_intstore_local}){
	$for(w in ${int_mem_widths}){
	  ${op}_${w}_${lm}(op($for (idx in $0..(local_memory_units-1)) 
			      { "${op}_${w}_${lm}.${idx}"})
			   flags(STOREOP LOCALMEMORY NONSPECULATIVE));
	}
      }
      $for(op in ${OP_floatstore_local}){
	$for(w in ${float_widths}){
	  ${op}_${w}_${lm}(op($for (idx in $0..(local_memory_units-1)) 
			      { "${op}_${w}_${lm}.${idx}"})
			   flags(STOREOP LOCALMEMORY NONSPECULATIVE));
	}
      }
    }
  }

  // **** Branch Operations ****
  $for (op in ${OP_branches} ${OP_dv_branches} ${OP_swp_branches}){
    ${op}(op($for (idx in $0..(branch_units-1)) { "${op}.${idx}"}) 
	  flags(BRANCHOP BRANCH NONSPECULATIVE));
  }

  // **** Dummy Operations ****
  NO_OP(op("NO_OP.0") flags(NULLOP NULL NONSPECULATIVE));
  M_NO_OP(op("M_NO_OP.0") flags(NULLOP NULL NONSPECULATIVE));
  PROLOGUE(op("PROLOGUE.0") flags(NULLOP NULL SPECULATIVE));
  EPILOGUE(op("EPILOGUE.0") flags(NULLOP NULL SPECULATIVE));
  DEFINE(op("DEFINE.0") flags(NULLOP NULL SPECULATIVE));
  ALLOC(op("ALLOC.0") flags(NULLOP NULL SPECULATIVE));
  DUMMY_BR(op("DUMMY_BR.0") flags(NULLOP NULL NONSPECULATIVE));
  C_MERGE(op("C_MERGE.0") flags(NULLOP NULL NONSPECULATIVE));
  D_SWITCH(op("D_SWITCH.0") flags(NULLOP NULL NONSPECULATIVE));
  D_MERGE(op("D_MERGE.0") flags(NULLOP NULL NONSPECULATIVE));
  REMAP(op("REMAP.0") flags(NULLOP NULL NONSPECULATIVE));
  BRDIR(op("BRDIR.0") flags(NULLOP NULL NONSPECULATIVE));
  BRIND(op("BRIND.0") flags(NULLOP NULL NONSPECULATIVE));

  //============================================================
  // SLARSEN: Vector operations

  // Vector integer computation operations 
  $for (class in vec_intarith2_int vec_intarith2_intmpy){
    $for (op in ${OP_${class}}){
      $for(w in ${int_alu_widths}){
	${op}_${w}(op($for (idx in $0..(vec_integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT SPECULATIVE));
      }
    }
  }

  $for (class in vec_intarith2_intdiv){
    $for (op in ${OP_${class}}){
      $for(w in ${int_alu_widths}){
	${op}_${w}(op($for (idx in $0..(vec_integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT NONSPECULATIVE));
      }
    }
  }

  // Vector floating-point computation operations
  $for (class in vec_floatarith1_float vec_floatarith1_floatdiv vec_floatarith2_float vec_floatarith2_floatdiv vec_floatarith2_floatmpy){
    $for(op in ${OP_${class}}){
      $for(w in ${float_widths}){
	${op}_${w}(op($for (idx in $0..(vec_float_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Vector conversion operations 
  $for(op in ${OP_vec_convif} ${OP_vec_convfi} ${OP_vec_convff}){
    ${op}(op($for (idx in $0..(vec_float_units-1)) { "${op}.${idx}"})
	  flags(ARITHOP FLOAT SPECULATIVE));
  }

  $for(op in ${OP_vec_sign_extend}){
    $for(w in ${int_extract_widths}){
      ${op}_${w}(op($for (idx in $0..(vec_integer_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP INT SPECULATIVE));
    }
  }

  // Vector transfer operations (between scalar and vector regs)
  $for (class in vec_intvsmove vec_intsvmove){
    $for (op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(vec_integer_xfr_units-1)) { "${op}.${idx}"})
            flags(ARITHOP INT SPECULATIVE));
    }
  }

  $for (class in vec_floatvsmove vec_floatsvmove){
    $for (op in ${OP_${class}}){
      $for (w in ${float_widths}){
        ${op}_${w}(op($for (idx in $0..(vec_float_xfr_units-1)) { "${op}_${w}.${idx}"})
              flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Vector move operations
  $for(class in vec_moveii){
    $for(op in ${OP_${class}}){
      ${op}(op($for (idx in $0..(vec_integer_units-1)) { "${op}.${idx}"})
	    flags(ARITHOP INT SPECULATIVE));
    }
  }

  $for(op in ${OP_vec_moveff}){
    $for(w in ${float_widths}){
      ${op}_${w}(op($for (idx in $0..(vec_float_units-1)) { "${op}_${w}.${idx}"})
		 flags(ARITHOP FLOAT SPECULATIVE));
    }
  }

  // Vector integer load ops
  $for(w in ${int_mem_widths}){
    $for (op in ${OP_vec_intload}){
      ${op}_${w}_C1_C1(op($for (idx in $0..(memory_units-1))
				{ "${op}_${w}_C1_C1.${idx}"})
			     flags(LOADOP MEMORY SPECULATIVE));
    }
  }

  // Vector float load ops
  $for(w in ${float_widths}){
    $for (op in ${OP_vec_floatload}){
      ${op}_${w}_C1_C1(op($for (idx in $0..(memory_units-1))
				{ "${op}_${w}_C1_C1.${idx}"})
			     flags(LOADOP MEMORY SPECULATIVE));
    }
  }

  // Vector integer store ops
  $for(w in ${int_mem_widths}){
    $for (op in ${OP_vec_intstore}){
      ${op}_${w}_C1(op($for (idx in $0..(memory_units-1))
			     { "${op}_${w}_C1.${idx}"})
			  flags(STOREOP MEMORY NONSPECULATIVE));
    }
  }

  // Vector float store ops
  $for(w in ${float_widths}){
    $for (op in ${OP_vec_floatstore}){
      ${op}_${w}_C1(op($for (idx in $0..(memory_units-1))
			     { "${op}_${w}_C1.${idx}"})
			  flags(STOREOP MEMORY NONSPECULATIVE));
    }
  }
}
