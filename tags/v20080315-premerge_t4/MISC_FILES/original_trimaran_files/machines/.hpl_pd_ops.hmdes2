/******************************************************************************

                    SOFTWARE LICENSE AGREEMENT NOTICE
                   -----------------------------------

IT IS A BREACH OF THIS LICENSE AGREEMENT TO REMOVE THIS NOTICE FROM THE FILE
OR SOFTWARE, OR ANY MODIFIED VERSIONS OF THIS FILE OR SOFTWARE OR DERIVATIVE
WORKS. 
___________________________________________________

Copyright Notices/Identification of Licensor(s) of Original Software 
in the File 

Copyright (C) 1994 Hewlett-Packard Company

All rights reserved by the foregoing, respectively.
___________________________________________________

Copyright Notices/Identification of Subsequent Licensor(s)/Contributors of 
Derivative Works

Copyright <Year> <Owner>
<Optional: For Commercial license rights, contact:_______________>

All rights reserved by the foregoing, respectively.
___________________________________________________

The code contained in this file, including both binary and source [if released
by the owner(s)] (hereafter, Software) is subject to copyright by the
respective Licensor(s) and ownership remains with such Licensor(s).  The
Licensor(s) of the original Software remain free to license their respective
proprietary Software for other purposes that are independent and separate from
this file, without obligation to any party. 

Licensor(s) grant(s) you (hereafter, Licensee) a license to use the Software
for academic, research and internal business purposes only, without a fee.
"Internal business purposes" means that Licensee may install, use and execute
the Software for the purpose of designing and evaluating products.  Licensee
may submit proposals for research support, and receive funding from private
and Government sponsors for continued development, support and maintenance of
the Software for the purposes permitted herein. 

Licensee may also disclose results obtained by executing the Software, as well
as algorithms embodied therein.  Licensee may redistribute the Software to
third parties provided that the copyright notices and this License Agreement
Notice statement are reproduced on all copies and that no charge is associated
with such copies. No patent or other intellectual property license is granted
or implied by this Agreement, and this Agreement does not license any acts
except those expressly recited. 

Licensee may modify the Software to make derivative works (as defined in
Section 101 of Title 17, U.S. Code) (hereafter, Derivative Works), as
necessary for its own academic, research and internal business purposes.
Title to copyrights and other proprietary rights in Derivative Works created
by Licensee shall be owned by Licensee subject, however, to the underlying
ownership interest(s) of the Licensor(s) in the copyrights and other
proprietary rights in the original Software.  All the same rights and licenses
granted herein and all other terms and conditions contained in this Agreement
pertaining to the Software shall continue to apply to any parts of the
Software included in Derivative Works.  Licensee's Derivative Work should
clearly notify users that it is a modified version and not the original
Software distributed by the Licensor(s). 

If Licensee wants to make its Derivative Works available to other parties,
such distribution will be governed by the terms and conditions of this License
Agreement.  Licensee shall not modify this License Agreement, except that
Licensee shall clearly identify the contribution of its Derivative Work to
this file by adding an additional copyright notice to the other copyright
notices listed above, to be added below the line "Copyright
Notices/Identification of Subsequent Licensor(s)/Contributors of Derivative
Works."  A party who is not an owner of such Derivative Work within the
meaning of U.S. Copyright Law (i.e., the original author, or the employer of
the author if "work of hire") shall not modify this License Agreement or add
such party's name to the copyright notices above. 

Each party who contributes Software or makes a Derivative Work to this file
(hereafter, Contributed Code) represents to each Licensor and to other
Licensees for its own Contributed Code that: 

(a)  Such Contributed Code does not violate (or cause the Software to
violate) the laws of the United States, including the export control laws of
the United States, or the laws of any other jurisdiction. 

(b)  The contributing party has all legal right and authority to make such
Contributed Code available and to grant the rights and licenses contained in
this License Agreement without violation or conflict with any law. 

(c)  To the best of the contributing party's knowledge and belief, the
Contributed Code does not infringe upon any proprietary rights or intellectual
property rights of any third party. 

LICENSOR(S) MAKE(S) NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE
OR DERIVATIVE WORKS FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" 	WITHOUT
EXPRESS OR IMPLIED WARRANTY, INCLUDING BUT NOT LIMITED TO THE MERCHANTABILITY,
USE OR FITNESS FOR ANY PARTICULAR PURPOSE AND ANY WARRANTY AGAINST
INFRINGEMENT OF ANY INTELLECTUAL PROPERTY RIGHTS.  LICENSOR(S) SHALL NOT BE
LIABLE FOR ANY DAMAGES SUFFERED BY THE USERS OF THE SOFTWARE OR DERIVATIVE
WORKS. 

Any Licensee wishing to make commercial use of the Software or Derivative
Works should contact each and every Licensor to negotiate an appropriate
license for such commercial use, and written permission of all Licensors will
be required for such a commercial license.  Commercial use includes (1)
integration of all or part of the source code into a product for sale by or on
behalf of Licensee to third parties, or (2) distribution of the Software or
Derivative Works to third parties that need it to utilize a commercial product
sold or licensed by or on behalf of Licensee. 

By using or copying this Contributed Code, Licensee agrees to abide by the
copyright law and all other applicable laws of the U.S., and the terms of this
License Agreement.  Any individual Licensor shall have the right to terminate
this license immediately by written notice upon Licensee's breach of, or
non-compliance with, any of its terms.  Licensee may be held legally
responsible for any copyright infringement that is caused or encouraged by
Licensee's failure to abide by the terms of this License Agreement. 

******************************************************************************/

/////////////////////////////////////////////////////////////////////////////
//
//      File:           hpl_pd_ops.hmdes2
//      Authors:        Vinod Kathail, Shail Aditya
//      Created:        March 20, 1998
//      Description:    HPL-PD Architecture Opcode Abbreviations
//
/////////////////////////////////////////////////////////////////////////////
// HPL-PD Operation Modifiers and Names (Architecture Version 1.0)

// Modifiers used in constructing opcodes. Not all modifiers are included; 
// ones not included are indicated in comments.

$def int_alu_widths W
$def int_mem_widths B H W
$def int_extract_widths B H 
$def float_widths S D

$def float_register_halves L U
$def integer_compare_conds FALSE TRUE EQ NEQ LT LLT LEQ LLEQ GT LGT GEQ LGEQ
// Not in --               SV NSV OD EV

$def float_compare_conds FALSE EQ LT LEQ GT GEQ NEQ TRUE
// Not in -- Ones that are true for unordered operands are not in, i.e., 
//                          UFALSE UEQ ULT ULEQ UGT UGEQ UNEQ UTRUE

$def cmpp_uncond_actions     UN UC
$def cmpp_cond_actions       CN CC
$def cmpp_or_actions         ON OC
$def cmpp_and_actions        AN AC
$def cmpp_dest_actions ${cmpp_uncond_actions} ${cmpp_or_actions} ${cmpp_and_actions}
// Not in --           CN CC

$def latency_src_cache_specifiers  C1 C2 C3
// Not in --                       V1
$def target_cache_specifiers       C1
// Not in --                       V1 C2 C3
// HPL-PD 2.0 Extn: Local memory specifiers
$def local_memory_specifiers       L1

$def swp_branch_direction_specifiers B F

// Operation names (in the order of appearance in HPL-PD Manual)

// Table 2: Integer computation operations 
// HPL-PD 2.0 Extn:
// In     -- MPYADD MPYADDN MPYRSUB MPYSUB (DIVFLOOR, DIVCEIL)

$def OP_intarith1_int ABS
$def OP_intarith2_int ADD ADDL SH1ADDL SH2ADDL SH3ADDL AND ANDCM NAND NOR OR ORCM SUB SUBL XOR XORCM MIN MAX
$def OP_intarith2_intshift SHL SHR SHLA SHRA
$def OP_intarith2_intdiv DIV DIVL REM REML 
$def OP_intarith2_intmpy MPY MPYL
$def OP_intarith3_intmpy MPYADD MPYADDN MPYRSUB MPYSUB

// Table 3: Floating-point computation operations
$def OP_floatarith1_float FABS 
$def OP_floatarith1_floatdiv FRCP FSQRT
$def OP_floatarith2_float FADD FMAX FMIN FSUB
$def OP_floatarith2_floatdiv FDIV
$def OP_floatarith2_floatmpy FMPY 
$def OP_floatarith3_floatmpy FMPYADD FMPYADDN FMPYRSUB FMPYSUB 

// Table 4: Conversion operations 
// unsigned converts
// Not in -- CONVLWS CONVLWD CONVLSW CONVLDW
// HPL-PD Cleanup: All conversion ops are cast on floating point unit
$def OP_convif_S CONVWS
$def OP_convif_D CONVWD
$def OP_convif ${OP_convif_S} ${OP_convif_D}
$def OP_convfi_S CONVSW 
$def OP_convfi_D CONVDW
$def OP_convfi ${OP_convfi_S} ${OP_convfi_D}
$def OP_convff CONVSD CONVDS
$def OP_sign_extend EXTS

// Table 5: Move operations
// Not in -- LDCM
$def OP_moveii MOVE
$def OP_moveif MOVEGF
$def OP_movefi MOVEFG
$def OP_moveff MOVEF
$def OP_movepi MOVEPG 

// Predicate bit extract and move -- Shail Aditya 05/26/98
// Not in - MOVEGBGT MOVEGBFT MOVEGBPT MOVEGBBT
$def OP_movegbp MOVEGBP
$def OP_movegcm MOVEGCM

// HPL-PD 2.0 Extn:
// For the time being, I am going to retain MOVE operation as is, since it 
// requires quite a few changes in the compiler. It will be replaced by
// separate moves later:
// In - Split moves instead of MOVE
$def OP_movegg MOVEGG
$def OP_movegc MOVEGC
$def OP_movecg MOVECG
$def OP_movebb MOVEBB
$def OP_split_moves ${OP_movegg} ${OP_movegc} ${OP_movecg} ${OP_movebb}
// In - Int literal moves to GPR
$def OP_int_literal_moves MOVELG MOVELGX MOVELGS
// In - Float literal moves to FPR
$def OP_float_literal_moves MOVELF MOVELFS
// In - Mass clear operation for PR
$def OP_mass_pred_clear PRED_CLEAR_ALL PRED_CLEAR_ALL_STATIC PRED_CLEAR_ALL_ROTATING
// In - Move pseudo operations. These are temporarily marked as real
// architecture ops rather than pseudo compiler ops.
$def OP_moveip MOVEGP 
$def OP_movepp MOVEPP 
$def OP_pred_writes PRED_SET PRED_CLEAR

// Table 8: Compare-to-register operations
// Integer ones 
$def OP_int_compare_to_reg CMPR
// Floating-point ones
$def OP_float_compare_to_reg FCMPR

// Table 9: Two-target compare-to-predicate operations
// Integer ones
$def OP_int_cmp_pred_two CMPP
// Floating ones 
$def OP_float_cmp_pred_two FCMPP

// HPL-PD 2.0 Extn: One target compare to predicate operations. 
// Integer ones
// Not in -- CMPPI
// $def OP_int_cmp_pred_one CMPPI
// Floating ones
// Not in -- FCMPPI
// $def OP_float_cmp_pred_one FCMPPI

// Table 12, 13, 14: Load/store operations for cache/main memory
// Integer load ops
// HPL-PD 2.0 Extn:
// NOT in -- LG LM LGI LDSG LDSM LDSGI
//           LX LIX LDSX LDSIX LGX LMX LGIX LDSGX LDSMX LDSGIX
$def OP_intload_std L
$def OP_intloadinc_std LI
$def OP_intload_spec LDS
$def OP_intloadinc_spec LDSI
// RMR load base+offset
$def OP_intloadgdisp_std LG
$def OP_intload ${OP_intload_std} ${OP_intloadinc_std} ${OP_intload_spec} ${OP_intloadinc_spec} ${OP_intloadgdisp_std}

// Float load ops
// HPL-PD 2.0 Extn:
// NOT in -- FLG FLM FLGI FLDSG FLDSM FLDSGI
$def OP_floatload_std FL
$def OP_floatloadinc_std FLI
$def OP_floatload_spec FLDS
$def OP_floatloadinc_spec FLDSI
// RMR load base+offset
$def OP_floatloadgdisp_std FLG
$def OP_floatload ${OP_floatload_std} ${OP_floatloadinc_std} ${OP_floatload_spec} ${OP_floatloadinc_spec} ${OP_floatloadgdisp_std}

// Integer store ops
// HPL-PD 2.0 Extn:
// NOT in -- SG SM SGI
$def OP_intstore_std S
$def OP_intstoreinc_std SI
// RMR load base+offset
$def OP_intstoregdisp_std SG
$def OP_intstore ${OP_intstore_std} ${OP_intstoreinc_std} ${OP_intstoregdisp_std}

// Float store ops
// HPL-PD 2.0 Extn:
// NOT in -- FSG FSM FSGI
$def OP_floatstore_std FS
$def OP_floatstoreinc_std FSI
// RMR load base+offset
$def OP_floatstoregdisp_std FSG
$def OP_floatstore ${OP_floatstore_std} ${OP_floatstoreinc_std} ${OP_floatstoregdisp_std}

// Data verify load operations 
// Int ldv ops
$def OP_intload_dv LDV
// Float ldv ops
$def OP_floatload_dv FLDV
// HPL-PD 2.0 Extn:
// NOT in -- LDVG LDVM
// NOT in -- FLDVG FLDVM

// HPL-PD Cleanup: There are no prefetch operations anymore. 

// Operations for spilling -- Shail Aditya 05/26/98
$def OP_intsave SAVE
$def OP_intrestore RESTORE
$def OP_floatsave FSAVE
$def OP_floatrestore FRESTORE
$def OP_brsave BSAVE
$def OP_brrestore BRESTORE

// Operations for predicate spilling. 
// TBD: These will go away soon, save/restore via CR
$def OP_pfill PRED_LOAD_ALL
$def OP_pspill PRED_STORE_ALL

// HPL-PD 2.0 Extn: Local memory load/store operations
// Int load ops 
// Not in -- LLX LLI LLIX LLG LLGX LLM LLMX LLGI LLGIX
$def OP_intload_local LL
// Float load ops
// Not in -- FLLI FLLG FLLM FLGI
$def OP_floatload_local FLL
// Int store ops
// Not in -- SLI SLG SLM SLGI
$def OP_intstore_local SL
// Float store ops
// Not in -- FSLI FSLG FSLM FSLGI
$def OP_floatstore_local FSL

// Table 16: Prepare to branch
$def OP_pbrs PBRR PBRA
// HPL-PD 2.0 Extn:
// In -  literal moves to BTR
$def OP_btr_literal_moves MOVELB MOVELBX MOVELBS
// In -- prepare to branch with literals
$def OP_pbr_with_literals PBRRL PBRAL PBRRLBS PBRALBS

// Table 17: Branch operations
$def OP_brucond BRU RTS
$def OP_brcond BRCT BRCF 
$def OP_brlink BRL
$def OP_brlc BRLC
$def OP_branches ${OP_brucond} ${OP_brcond} ${OP_brlink} ${OP_brlc}
$def OP_brdvi BRDVI
$def OP_brdvf BRDVF
$def OP_dv_branches ${OP_brdvi} ${OP_brdvf}
$def OP_brtop BRF_B_B_F BRF_F_F_F
$def OP_swp_branches ${OP_brtop}
// Not in - BRW and all other combinations of direction modifiers
// psuedo branch ops
// BRDIR, BRIND are compiler psuedo ops with branch latency
// RTS is an alias of BRU but it is kept separately for now

// HPL-PD 2.0 Extn:
// PBR+Branch operations: GPR/Short lit form
// Not in -- BRUR BRUA BRCTR BRCTA BRCFR BRCFA BRLR BRLA BRLCR BRLCA 
//           BRFR BRFA BRWR BRWA 
// Pseudo branch operations for control-flow analysis etc.
// Not in -- BRDVIR BRDVIA BRDVFR BRDVFA 
// PBR+Branch operations: medium lit form
// Not in -- BRURL BRUAL BRCTRL BRCTAL BRCFRL BRCFAL BRLRL BRLAL BRLCRL BRLCAL 
//           BRFRL BRFAL BRWRL BRWAL 
// Pseudo branch operations for control-flow analysis etc.
// Not in -- BRDVIRL BRDVIAL BRDVFRL BRDVFAL 

// Elcor Compiler Dummy/Pseudo Operations
// No ops should not be treated as dummy ops (i.e. NULLOP NULL)
// NO_OP M_NO_OP 
// Compiler dummy ops with null latency
// PROLOGUE EPILOGUE DEFINE ALLOC DUMMY_BR C_MERGE D_MERGE REMAP
// Compiler dummy ops with branch latency
// D_SWITCH BRDIR BRIND

// SLARSEN: Vector ops
$def OP_vec_intarith2_int VADD VADDL VSUB VSUBL VMIN VMAX
$def OP_vec_intarith2_intdiv VDIV VDIVL VREM VREML 
$def OP_vec_intarith2_intmpy VMPY VMPYL

$def OP_vec_floatarith1_float VFABS 
$def OP_vec_floatarith1_floatdiv VFSQRT
$def OP_vec_floatarith2_float VFADD VFMAX VFMIN VFSUB
$def OP_vec_floatarith2_floatdiv VFDIV
$def OP_vec_floatarith2_floatmpy VFMPY 

$def OP_vec_convif VCONVWS VCONVWD
$def OP_vec_convfi VCONVSW VCONVDW
$def OP_vec_convff VCONVSD VCONVDS
$def OP_vec_sign_extend VEXTS

$def OP_vec_intvsmove VSMOVE
$def OP_vec_intsvmove SVMOVE
$def OP_vec_floatvsmove VSFMOVE
$def OP_vec_floatsvmove SVFMOVE

$def OP_vec_moveii VMOVE
$def OP_vec_moveff VMOVEF

$def OP_vec_intload	VL
$def OP_vec_intstore	VS
$def OP_vec_floatload	VFL
$def OP_vec_floatstore	VFS
