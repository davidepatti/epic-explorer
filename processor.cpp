/***************************************************************************
                          Processor.cpp  -  description
                             -------------------
    begin                : Sat Aug 17 2002
    copyright            : (C) 2002 by Davide Patti
    email                : davidepatti@email.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "processor.h"

Processor::Processor(){

}

Processor::~Processor(){
}

void Processor::set_to_default()
{
    config.integer_units.set_to_default();
    config.float_units.set_to_default();
    config.branch_units.set_to_default();
    config.memory_units.set_to_default();

    config.gpr_static_size.set_to_default();
    config.fpr_static_size.set_to_default();
    config.pr_static_size.set_to_default();
    config.cr_static_size.set_to_default();
    config.btr_static_size.set_to_default();

}

void Processor::load_config()
{
    string filename = get_base_dir()+"/trimaran-workspace/machines/"+EXPLORER_HMDES2;
    std::ifstream input_file(filename.c_str());

    if (!input_file) {
	cout << "\nError opening hmdes file :" << filename;
	wait_key();
    }
    else
    {
	int val;

	//NOTE : This function only read from hmdes configuration file
	//the parameter values that are subject of exploration.
	//
	//Rotating size entries are currently ignored, assuming
	//that rotating portion has always the same size of static
	//portion for all register files.

	/// Register files sizes ////////////////////////////////////
	go_until("!gpr_static_size",input_file);
	input_file>>val;
	config.gpr_static_size.set_val(val);

	go_until("!fpr_static_size",input_file);
	input_file>>val;
	config.fpr_static_size.set_val(val);

	go_until("!pr_static_size",input_file);
	input_file>>val;

	config.pr_static_size.set_val(val);

	go_until("!cr_static_size",input_file);
	input_file>>val;
	config.cr_static_size.set_val(val);

	go_until("!btr_static_size",input_file);
	input_file>>val;
	config.btr_static_size.set_val(val);

	//// Functional units ////////////////////////

	go_until("!integer_units",input_file);
	input_file>>val;
	config.integer_units.set_val(val);

	go_until("!float_units",input_file);
	input_file>>val;
	config.float_units.set_val(val);

	go_until("!memory_units",input_file);
	input_file>>val;
	config.memory_units.set_val(val);

	if (val==1) 
	{
	    cout << "\n Fatal error: due a Trimaran bug EPIC-Exlorer currently does not";
	    cout << "\n support spaces with memory_units = 1. ";
	    cout << "\n Please modify your *.sub file in trimaran-workspace/SUBSPACES dir.";
	    cout << "\n For more details : https://lists.csail.mit.edu/pipermail/trimaran-users/2005-September/000083.html";
	    exit(1);
	}

	go_until("!branch_units",input_file);
	input_file>>val;
	config.branch_units.set_val(val);
    }

}
void Processor::save_config() const 
{
    string filename = get_base_dir()+"/trimaran-workspace/machines/"+EXPLORER_HMDES2;
    std::ofstream output_file(filename.c_str());

    if (!output_file) 
    {
	cout << "\nError opening hmdes file :" << filename;
	wait_key();
    }
    else
    {
	// NOTE: 
	// - we assume that rotating and static portion of registers
	// have equal sizes.
	// - All the other parameters are fixed to their default values as specified
	// in the standard trimaran hmdes2 files. 

	output_file << "\n//////////////////////////////////////////////////";
	output_file << "\n// Epic Explorer processor configuration";
	output_file << "\n//////////////////////////////////////////////////";
	output_file << "\n// DO NOT EDIT: this file is generated by epic explorer ";
	output_file << "\n// and should be included into the main hmdes2 machine ";
	output_file << "\n// description file using the $include directive";

	output_file << "\n\n";
	output_file << "\n// Register file sizes ";
	output_file << "\n\n";
	output_file << "\n$def !gpr_static_size\t" << config.gpr_static_size.get_val();
	output_file << "\n$def !gpr_rotating_size\t" << config.gpr_static_size.get_val();
	output_file << "\n$def !fpr_static_size\t" <<   config.fpr_static_size.get_val();
	output_file << "\n$def !fpr_rotating_size\t" << config.fpr_static_size.get_val();
	output_file << "\n$def !pr_static_size\t" <<    config.pr_static_size.get_val();
	output_file << "\n$def !pr_rotating_size\t" <<  config.pr_static_size.get_val();
	output_file << "\n$def !cr_static_size\t" <<    config.cr_static_size.get_val();
	output_file << "\n$def !cr_rotating_size\t" <<  config.cr_static_size.get_val();
	output_file << "\n$def !btr_static_size\t" <<   config.btr_static_size.get_val();

	output_file << "\n\n// Functional Units \n";

	output_file << "\n$def !integer_units\t" << config.integer_units.get_val();
	output_file << "\n$def !float_units\t" <<   config.float_units.get_val();
	output_file << "\n$def !memory_units\t" <<  config.memory_units.get_val();
	output_file << "\n$def !branch_units\t" <<  config.branch_units.get_val();
    }
}
